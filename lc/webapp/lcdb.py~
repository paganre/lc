from webapp.models import Thread,Comment,Tag,Domain,LcUser
from django.core.cache import cache
from time import time
import redis
import msgpack
import traceback


def get_tags(tag_ids):
    """
    returns tagid,name pairs for given tag_ids - caches the results
    """
    try:
        # check cache
        tags = cache.get_many(['tag:'+str(tagid) for tagid in tag_ids])
        for tagid in tag_ids:
            if 'tag:'+str(tagid) not in tags:
                # cache miss
                tag = Tag.objects.get(pk = tagid)
                tdict = {
                    'id':tag.id,
                    'name':tag.name
                    }
                # cache result
                cache.set('tag:'+str(tagid),msgpack.packb(tdict))
                tags['tag:'+str(tagid)] = tdict
            else:
                # cache hit - unpack
                tags['tag:'+str(tagid)] = msgpack.unpackb(tags['tag:'+str(tagid)])
        return tags
    except:
        print traceback.format_exc()
        return []

def get_thread_headers(tids):
    """
    returns the thread headers for given thread ids
    Thread headers in the cache will hold:
    id, url, title, summary, domain, cname, cid, time
    following will be acquired thru redis:
    tag-ids:             lrange('t:tags:<tid>',0,-1)
    number-of-comments:  llen('t:comms:<tid>')
    net-vote:            get('t:up:<tid>') - get('t:down:<tid>')
    """
    try:
        # check cache
        headers = cache.get_many(['t:head:'+str(tid) for tid in tids])
        r = redis.Redis()
        pipe = r.pipeline()
        for tid in tids:
            pipe.lrange('t:tags:'+str(tid),0,-1)
            pipe.llen('t:comms:'+str(tid))
            pipe.get('t:up:'+str(tid))
            pipe.get('t:down:'+str(tid))
        results = pipe.execute()
        for i,tid in enumerate(tids):
            # get cache misses from db and cache them
            if 't:head:'+str(tid) not in headers:
                # cache miss
                t = Thread.objects.get(pk = tid)
                tdict = {
                    'id':t.id,
                    'url':t.url,
                    'title':t.title,
                    'summary':t.summary,
                    'domain':t.domain.name,
                    'cname':t.creator.user.username,
                    'cid':t.creator.id,
                    'time':t.time_created
                    }
                cache.set('t:head:'+str(tid),msgpack.packb(tdict))
                headers['t:head:'+str(tid)] = tdict
            else:
                headers['t:head:'+str(tid)] = msgpack.unpackb(headers['t:head:'+str(tid)]) #unpack the result obtain from cache
            headers['t:head:'+str(tid)]['tags'] = get_tags(results[i*4]) # list of tag names
            headers['t:head:'+str(tid)]['numcom'] = results[i*4+1]
            if results[i*4+2] == None:
                results[i*4+2] = 0
            if results[i*4+3] == None:
                results[i*4+3] = 0
            header['t:head:'+str(tid)]['netvote'] = int(results[i*4+2]) - int(results[i*4+3])
        return headers
    except:
        print traceback.format_exc()
        return []
